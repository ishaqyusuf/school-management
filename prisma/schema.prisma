// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Students {
  id                Int                 @unique @default(autoincrement())
  parentId          Int?
  slug              String
  firstName         String
  lastName          String?
  meta              Json?               @db.Json
  createdAt         DateTime?           @db.Timestamp(0)
  updatedAt         DateTime?           @db.Timestamp(0)
  StudentTermSheets StudentTermSheets[]
  Parent            Parents?            @relation(fields: [parentId], references: [id])
  Results           AssessmentResults[]
}

model Parents {
  id        Int        @unique @default(autoincrement())
  firstName String
  lastName  String?
  meta      Json?      @db.Json
  createdAt DateTime?  @db.Timestamp(0)
  updatedAt DateTime?  @db.Timestamp(0)
  Children  Students[]
}

model AcademicYears {
  id           Int             @unique @default(autoincrement())
  slug         String          @unique
  title        String // 1444/1445
  meta         Json?           @db.Json
  createdAt    DateTime?       @db.Timestamp(0)
  updatedAt    DateTime?       @db.Timestamp(0)
  Terms        AcademicTerms[]
  ClassRoom    ClassRoom[]
  Transactions Transactions[]
}

model AcademicTerms {
  id                Int                 @unique @default(autoincrement())
  slug              String              @unique
  title             String //1st term 2023/2024
  academicYearId    Int
  meta              Json?               @db.Json
  createdAt         DateTime?           @db.Timestamp(0)
  updatedAt         DateTime?           @db.Timestamp(0)
  AcademicYear      AcademicYears       @relation(fields: [academicYearId], references: [id])
  StudentTermSheets StudentTermSheets[]
  Subjects          Subjects[]
  Results           AssessmentResults[]
  Transactions      Transactions[]
}

model ClassRoom {
  id                Int                 @unique @default(autoincrement())
  title             String
  slug              String
  academicYearsId   Int
  meta              Json?               @db.Json
  createdAt         DateTime?           @db.Timestamp(0)
  updatedAt         DateTime?           @db.Timestamp(0)
  StudentTermSheets StudentTermSheets[]
  AcademicYear      AcademicYears       @relation(fields: [academicYearsId], references: [id])
  Assessments       Assessments[]
  Subjects          Subjects[]
}

model Subjects {
  id              Int                 @unique @default(autoincrement())
  academicTermsId Int
  title           String
  slug            String
  classRoomId     Int
  meta            Json?               @db.Json
  createdAt       DateTime?           @db.Timestamp(0)
  updatedAt       DateTime?           @db.Timestamp(0)
  ClassRoom       ClassRoom           @relation(fields: [classRoomId], references: [id])
  AcademicTerm    AcademicTerms       @relation(fields: [academicTermsId], references: [id])
  Assessments     Assessments[]
  Results         AssessmentResults[]
}

model Assessments {
  id          Int                 @unique @default(autoincrement())
  title       String //exam, test etc.
  slug        String //subject-title
  classRoomId Int
  subjectsId  Int
  obtainable  Int
  meta        Json?               @db.Json
  createdAt   DateTime?           @db.Timestamp(0)
  updatedAt   DateTime?           @db.Timestamp(0)
  ClassRoom   ClassRoom           @relation(fields: [classRoomId], references: [id])
  Subject     Subjects            @relation(fields: [subjectsId], references: [id])
  Results     AssessmentResults[]
}

model AssessmentResults {
  id                  Int               @unique @default(autoincrement())
  assessmentsId       Int
  subjectsId          Int
  studentsId          Int
  academicTermsId     Int
  studentTermSheetsId Int
  Assessment          Assessments       @relation(fields: [assessmentsId], references: [id])
  Subject             Subjects          @relation(fields: [subjectsId], references: [id])
  Student             Students          @relation(fields: [studentsId], references: [id])
  AcademicTerm        AcademicTerms     @relation(fields: [academicTermsId], references: [id])
  StudentTermSheet    StudentTermSheets @relation(fields: [studentTermSheetsId], references: [id])
}

model StudentTermSheets {
  id        Int                 @unique @default(autoincrement())
  studentId Int
  slug      String
  termId    Int
  classId   Int
  meta      Json?               @db.Json
  createdAt DateTime?           @db.Timestamp(0)
  updatedAt DateTime?           @db.Timestamp(0)
  Fees      SchoolFeePayment[]
  Term      AcademicTerms       @relation(fields: [termId], references: [id])
  Student   Students            @relation(fields: [studentId], references: [id])
  ClassRoom ClassRoom           @relation(fields: [classId], references: [id])
  Results   AssessmentResults[]
}

model Wallets {
  id        Int       @unique @default(autoincrement())
  balance   Float?
  meta      Json?     @db.Json
  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
}

model Transactions {
  id              Int           @unique @default(autoincrement())
  academicTermsId Int
  academicYearsId Int
  amount          Float?
  type            String //debit,credit
  usersId         Int
  meta            Json?         @db.Json
  createdAt       DateTime?     @db.Timestamp(0)
  updatedAt       DateTime?     @db.Timestamp(0)
  User            Users         @relation(fields: [usersId], references: [id])
  AcademicYear    AcademicYears @relation(fields: [academicYearsId], references: [id])
  AcademicTerm    AcademicTerms @relation(fields: [academicTermsId], references: [id])
}

model Users {
  id           Int            @unique @default(autoincrement())
  name         String
  role         String
  password     String
  meta         Json?          @db.Json
  Transactions Transactions[]
  createdAt    DateTime?      @db.Timestamp(0)
  updatedAt    DateTime?      @db.Timestamp(0)
}

model SchoolFeePayment {
  id               Int               @unique @default(autoincrement())
  amount           Float?
  createdAt        DateTime?         @db.Timestamp(0)
  updatedAt        DateTime?         @db.Timestamp(0)
  studentTermId    Int
  StudentTermSheet StudentTermSheets @relation(fields: [studentTermId], references: [id])
}
