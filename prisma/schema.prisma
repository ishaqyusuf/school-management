// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Students {
  id                Int                 @unique @default(autoincrement())
  parentId          Int?
  firstName         String
  lastName          String?
  meta              Json?               @db.Json
  createdAt         DateTime?           @db.Timestamp(0)
  updatedAt         DateTime?           @db.Timestamp(0)
  StudentTermSheets StudentTermSheets[]
  Parent            Parents?            @relation(fields: [parentId], references: [id])
}

model Parents {
  id        Int        @unique @default(autoincrement())
  firstName String
  lastName  String?
  meta      Json?      @db.Json
  createdAt DateTime?  @db.Timestamp(0)
  updatedAt DateTime?  @db.Timestamp(0)
  Children  Students[]
}

model AcademicYears {
  id        Int             @unique @default(autoincrement())
  slug      String          @unique
  title     String // 1444/1445
  meta      Json?           @db.Json
  createdAt DateTime?       @db.Timestamp(0)
  updatedAt DateTime?       @db.Timestamp(0)
  Terms     AcademicTerms[]
  ClassRoom ClassRoom[]
}

model AcademicTerms {
  id                Int                 @unique @default(autoincrement())
  slug              String              @unique
  title             String //1st term 2023/2024
  academicYearId    Int
  meta              Json?               @db.Json
  createdAt         DateTime?           @db.Timestamp(0)
  updatedAt         DateTime?           @db.Timestamp(0)
  AcademicYear      AcademicYears       @relation(fields: [academicYearId], references: [id])
  StudentTermSheets StudentTermSheets[]
}

model ClassRoom {
  id                Int                 @unique @default(autoincrement())
  title             String
  academicYearsId   Int?
  meta              Json?               @db.Json
  createdAt         DateTime?           @db.Timestamp(0)
  updatedAt         DateTime?           @db.Timestamp(0)
  StudentTermSheets StudentTermSheets[]
  AcademicYears     AcademicYears?      @relation(fields: [academicYearsId], references: [id])
}

model StudentTermSheets {
  id        Int                @unique @default(autoincrement())
  studentId Int
  termId    Int
  classId   Int
  meta      Json?              @db.Json
  createdAt DateTime?          @db.Timestamp(0)
  updatedAt DateTime?          @db.Timestamp(0)
  Fees      SchoolFeePayment[]
  Term      AcademicTerms      @relation(fields: [termId], references: [id])
  Student   Students           @relation(fields: [studentId], references: [id])
  ClassRoom ClassRoom          @relation(fields: [classId], references: [id])
}

model Wallets {
  id        Int       @unique @default(autoincrement())
  balance   Float?
  meta      Json?     @db.Json
  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
}

model Transactions {
  id        Int       @unique @default(autoincrement())
  amount    Float?
  type      String //debit,credit
  usersId   Int?
  meta      Json?     @db.Json
  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime? @db.Timestamp(0)
  User      Users?    @relation(fields: [usersId], references: [id])
}

model Users {
  id           Int            @unique @default(autoincrement())
  name         String
  role         String
  password     String
  meta         Json?          @db.Json
  Transactions Transactions[]
  createdAt    DateTime?      @db.Timestamp(0)
  updatedAt    DateTime?      @db.Timestamp(0)
}

model SchoolFeePayment {
  id                Int               @unique @default(autoincrement())
  amount            Float?
  createdAt         DateTime?         @db.Timestamp(0)
  updatedAt         DateTime?         @db.Timestamp(0)
  studentTermId     Int
  StudentTermSheets StudentTermSheets @relation(fields: [studentTermId], references: [id])
}
