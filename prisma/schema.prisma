// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Students {
  id                Int                 @unique @default(autoincrement())
  parentId          Int?
  name              String
  sex               String
  meta              Json?               @db.Json
  createdAt         DateTime?           @db.Timestamp(0)
  updatedAt         DateTime?           @db.Timestamp(0)
  StudentTermSheets StudentTermSheets[]
  Parent            Parents?            @relation(fields: [parentId], references: [id])
  Results           AssessmentResults[]
}

model Parents {
  id        Int        @unique @default(autoincrement())
  name      String
  meta      Json?      @db.Json
  createdAt DateTime?  @db.Timestamp(0)
  updatedAt DateTime?  @db.Timestamp(0)
  children  Students[]
}

model AcademicYears {
  id           Int                       @unique @default(autoincrement())
  title        String // 1444/1445
  meta         Json?                     @db.Json
  createdAt    DateTime?                 @db.Timestamp(0)
  updatedAt    DateTime?                 @db.Timestamp(0)
  terms        AcademicTerms[]
  classRooms   ClassRoom[]
  transactions WalletTransactions[]
  subjects     AcademicSessionSubjects[]
}

model AcademicTerms {
  id                Int                  @unique @default(autoincrement())
  title             String //1st term 2023/2024
  academicYearId    Int
  meta              Json?                @db.Json
  current           Boolean?
  startedAt         DateTime?            @db.Timestamp(0)
  endsAt            DateTime?            @db.Timestamp(0)
  createdAt         DateTime?            @db.Timestamp(0)
  updatedAt         DateTime?            @db.Timestamp(0)
  academicYear      AcademicYears        @relation(fields: [academicYearId], references: [id])
  studentTermSheets StudentTermSheets[]
  results           AssessmentResults[]
  transactions      WalletTransactions[]
}

model ClassRoom {
  id                Int                       @unique @default(autoincrement())
  title             String
  academicYearsId   Int
  meta              Json?                     @db.Json
  createdAt         DateTime?                 @db.Timestamp(0)
  updatedAt         DateTime?                 @db.Timestamp(0)
  StudentTermSheets StudentTermSheets[]
  AcademicYear      AcademicYears             @relation(fields: [academicYearsId], references: [id])
  Assessments       Assessments[]
  sessionSubjects   AcademicSessionSubjects[]
}

model AcademicSessionSubjects {
  id             Int            @unique @default(autoincrement())
  academicYearId Int?
  subjectId      Int?
  classRoomId    Int
  meta           Json?          @db.Json
  createdAt      DateTime?      @db.Timestamp(0)
  updatedAt      DateTime?      @db.Timestamp(0)
  academicYear   AcademicYears? @relation(fields: [academicYearId], references: [id])
  subject        Subjects?      @relation(fields: [subjectId], references: [id])
  classRoom      ClassRoom      @relation(fields: [classRoomId], references: [id])
  assessments    Assessments[]
}

model Subjects {
  id                Int                       @unique @default(autoincrement())
  academicTermsId   Int
  title             String
  meta              Json?                     @db.Json
  createdAt         DateTime?                 @db.Timestamp(0)
  updatedAt         DateTime?                 @db.Timestamp(0)
  subjectSessions   AcademicSessionSubjects[]
  assessmentResults AssessmentResults[]
}

model Assessments {
  id               Int                      @unique @default(autoincrement())
  title            String //exam, test etc. 
  classRoomId      Int
  subjectId        Int
  obtainable       Int
  meta             Json?                    @db.Json
  createdAt        DateTime?                @db.Timestamp(0)
  updatedAt        DateTime?                @db.Timestamp(0)
  ClassRoom        ClassRoom                @relation(fields: [classRoomId], references: [id])
  Results          AssessmentResults[]
  sessionSubject   AcademicSessionSubjects? @relation(fields: [sessionSubjectId], references: [id])
  sessionSubjectId Int?
}

model AssessmentResults {
  id                  Int               @unique @default(autoincrement())
  assessmentsId       Int
  subjectsId          Int
  studentsId          Int
  academicTermsId     Int
  studentTermSheetsId Int
  Assessment          Assessments       @relation(fields: [assessmentsId], references: [id])
  Subject             Subjects          @relation(fields: [subjectsId], references: [id])
  Student             Students          @relation(fields: [studentsId], references: [id])
  AcademicTerm        AcademicTerms     @relation(fields: [academicTermsId], references: [id])
  StudentTermSheet    StudentTermSheets @relation(fields: [studentTermSheetsId], references: [id])
}

model StudentTermSheets {
  id           Int                  @unique @default(autoincrement())
  studentId    Int
  termId       Int
  classId      Int
  payable      Int?
  owing        Int?
  meta         Json?                @db.Json
  createdAt    DateTime?            @db.Timestamp(0)
  updatedAt    DateTime?            @db.Timestamp(0)
  // Fees         StudentPayments[]
  Transactions WalletTransactions[]
  Term         AcademicTerms        @relation(fields: [termId], references: [id])
  Student      Students             @relation(fields: [studentId], references: [id])
  ClassRoom    ClassRoom            @relation(fields: [classId], references: [id])
  Results      AssessmentResults[]
}

model Wallets {
  id             Int       @unique @default(autoincrement())
  academicTermId Int       @unique
  academicYearId Int
  balance        Float?
  meta           Json?     @db.Json
  createdAt      DateTime? @db.Timestamp(0)
  updatedAt      DateTime? @db.Timestamp(0)
}

model WalletTransactions {
  id                  Int                @unique @default(autoincrement())
  academicTermsId     Int
  academicYearsId     Int
  userId              Int
  updateWallet        Boolean?
  amount              Float
  description         String?
  transaction         String? //debit,credit
  type                String
  meta                Json?              @db.Json
  createdAt           DateTime?          @db.Timestamp(0)
  updatedAt           DateTime?          @db.Timestamp(0)
  // paymentId           Int?
  studentTermSheetsId Int?
  // studentPaymentsId   Int?
  // payment             StudentPayments?   @relation(fields: [studentPaymentsId], references: [id])
  User                Users              @relation(fields: [userId], references: [id])
  AcademicYear        AcademicYears      @relation(fields: [academicYearsId], references: [id])
  AcademicTerm        AcademicTerms      @relation(fields: [academicTermsId], references: [id])
  StudentTermSheet    StudentTermSheets? @relation(fields: [studentTermSheetsId], references: [id])
}

model Users {
  id           Int                  @unique @default(autoincrement())
  name         String
  role         String
  password     String
  meta         Json?                @db.Json
  Transactions WalletTransactions[]
  createdAt    DateTime?            @db.Timestamp(0)
  updatedAt    DateTime?            @db.Timestamp(0)
}

// model StudentPayments {
//   id               Int                  @unique @default(autoincrement())
//   amount           Float?
//   paymentType      String
//   note             String?
//   createdAt        DateTime?            @db.Timestamp(0)
//   updatedAt        DateTime?            @db.Timestamp(0)
//   studentTermId    Int
//   transactions     WalletTransactions[]
//   StudentTermSheet StudentTermSheets    @relation(fields: [studentTermId], references: [id])
// }
